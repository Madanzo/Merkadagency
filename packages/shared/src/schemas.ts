import { z } from 'zod';

// Brand theme
export const BrandThemeSchema = z.object({
  ink: z.string().default('#0F1115'),
  violet: z.string().default('#5A27FF'),
  teal: z.string().default('#16B8A6'),
  gray: z.string().default('#9CA3AF'),
  white: z.string().default('#FFFFFF'),
});

export type BrandTheme = z.infer<typeof BrandThemeSchema>;

// Asset kinds
export const AssetKindSchema = z.enum(['image', 'video', 'audio', 'logo']);
export type AssetKind = z.infer<typeof AssetKindSchema>;

// Project status
export const ProjectStatusSchema = z.enum([
  'draft',
  'storyboard_generated',
  'assets_uploaded',
  'vo_generated',
  'music_selected',
  'rendering',
  'completed',
  'failed',
]);
export type ProjectStatus = z.infer<typeof ProjectStatusSchema>;

// Render job status
export const RenderJobStatusSchema = z.enum([
  'queued',
  'processing',
  'completed',
  'failed',
]);
export type RenderJobStatus = z.infer<typeof RenderJobStatusSchema>;

// Video ratio
export const VideoRatioSchema = z.enum(['9:16', '16:9', '1:1']);
export type VideoRatio = z.infer<typeof VideoRatioSchema>;

// Project
export const ProjectSchema = z.object({
  id: z.string().uuid(),
  title: z.string().min(1).max(200),
  brief: z.string().optional(),
  status: ProjectStatusSchema,
  ratio: VideoRatioSchema,
  brandTheme: BrandThemeSchema,
  createdAt: z.date(),
  updatedAt: z.date(),
});

export const CreateProjectSchema = z.object({
  title: z.string().min(1).max(200),
  brief: z.string().min(10),
  ratio: VideoRatioSchema.default('9:16'),
  brandTheme: BrandThemeSchema.optional(),
});

export type Project = z.infer<typeof ProjectSchema>;
export type CreateProject = z.infer<typeof CreateProjectSchema>;

// Asset
export const AssetMetaSchema = z.object({
  width: z.number().optional(),
  height: z.number().optional(),
  duration: z.number().optional(),
  format: z.string().optional(),
  fileSize: z.number().optional(),
  originalName: z.string().optional(),
});

export const AssetSchema = z.object({
  id: z.string().uuid(),
  projectId: z.string().uuid(),
  kind: AssetKindSchema,
  url: z.string().url(),
  thumbnailUrl: z.string().url().optional(),
  meta: AssetMetaSchema,
  createdAt: z.date(),
});

export type Asset = z.infer<typeof AssetSchema>;
export type AssetMeta = z.infer<typeof AssetMetaSchema>;

// Scene
export const SceneSchema = z.object({
  id: z.string().uuid(),
  projectId: z.string().uuid(),
  index: z.number().int().min(0),
  durationMs: z.number().int().min(100),
  imageAssetId: z.string().uuid().optional(),
  overlayText: z.string().max(500).optional(),
  voSegmentId: z.string().uuid().optional(),
  createdAt: z.date(),
});

export type Scene = z.infer<typeof SceneSchema>;

// VO Segment
export const VoSegmentSchema = z.object({
  id: z.string().uuid(),
  projectId: z.string().uuid(),
  sceneId: z.string().uuid().optional(),
  text: z.string().min(1),
  audioUrl: z.string().url().optional(),
  durationMs: z.number().int().optional(),
  timestamps: z.array(z.number()).optional(),
  createdAt: z.date(),
});

export type VoSegment = z.infer<typeof VoSegmentSchema>;

// Render artifacts
export const RenderArtifactsSchema = z.object({
  mp4Url: z.string().url().optional(),
  fcpxmlUrl: z.string().url().optional(),
  edlUrl: z.string().url().optional(),
});

export type RenderArtifacts = z.infer<typeof RenderArtifactsSchema>;

// Render job
export const RenderJobSchema = z.object({
  id: z.string().uuid(),
  projectId: z.string().uuid(),
  status: RenderJobStatusSchema,
  artifacts: RenderArtifactsSchema,
  logs: z.array(z.string()),
  error: z.string().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
  completedAt: z.date().optional(),
});

export type RenderJob = z.infer<typeof RenderJobSchema>;

// Storyboard (generated by Director)
export const StoryboardSceneSchema = z.object({
  index: z.number().int().min(0),
  durationMs: z.number().int().min(100),
  description: z.string(),
  overlayText: z.string().optional(),
  voiceoverText: z.string().optional(),
});

export const StoryboardSchema = z.object({
  scenes: z.array(StoryboardSceneSchema).min(1).max(20),
  totalDurationMs: z.number().int(),
  musicMood: z.string().optional(),
});

export type Storyboard = z.infer<typeof StoryboardSchema>;
export type StoryboardScene = z.infer<typeof StoryboardSceneSchema>;

// API request/response types
export const GetUploadUrlRequestSchema = z.object({
  fileName: z.string(),
  fileType: z.string(),
  assetKind: AssetKindSchema,
});

export const GetUploadUrlResponseSchema = z.object({
  uploadUrl: z.string().url(),
  assetId: z.string().uuid(),
  publicUrl: z.string().url(),
});

export type GetUploadUrlRequest = z.infer<typeof GetUploadUrlRequestSchema>;
export type GetUploadUrlResponse = z.infer<typeof GetUploadUrlResponseSchema>;

export const GenerateVoRequestSchema = z.object({
  useMock: z.boolean().default(true),
});

export type GenerateVoRequest = z.infer<typeof GenerateVoRequestSchema>;

export const SelectMusicRequestSchema = z.object({
  mood: z.string().optional(),
  useMock: z.boolean().default(true),
});

export type SelectMusicRequest = z.infer<typeof SelectMusicRequestSchema>;

export const RenderRequestSchema = z.object({
  exportFcpxml: z.boolean().default(true),
  exportEdl: z.boolean().default(false),
});

export type RenderRequest = z.infer<typeof RenderRequestSchema>;
